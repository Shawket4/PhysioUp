package Controllers

import (
	"PhysioUp/Models"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"
)

func RegisterAppointment(c *gin.Context) {
	var input struct {
		AppointmentRequestID uint                 `json:"appointment_request_id"`
		Extra                Models.Appointment   `json:"extra"`
		TreatmentPlan        Models.TreatmentPlan `json:"treatment_plan"`
	}

	if err := c.ShouldBindBodyWith(&input, binding.JSON); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	input.TreatmentPlan.Date = time.Now().Format("2006-01-02")
	// Start a transaction
	tx := Models.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback() // Rollback the transaction in case of panic
		}
	}()

	// Fetch the appointment request
	var appointmentRequest Models.AppointmentRequest
	if err := tx.Model(&Models.AppointmentRequest{}).Where("id = ?", input.AppointmentRequestID).First(&appointmentRequest).Error; err != nil {
		log.Println(err.Error())
		tx.Rollback()
		c.JSON(http.StatusBadRequest, gin.H{"error": "Appointment request not found"})
		return
	}

	// Populate appointment details
	var appointment Models.Appointment = input.Extra
	appointment.PatientName = appointmentRequest.PatientName
	appointment.TherapistID = appointmentRequest.TherapistID
	appointment.TherapistName = appointmentRequest.TherapistName
	appointment.PatientID = appointmentRequest.PatientID

	// Handle treatment plan
	if input.TreatmentPlan.ID == 0 {
		// Create a new treatment plan
		var superTreatmentPlan Models.SuperTreatmentPlan
		if err := tx.Model(&Models.SuperTreatmentPlan{}).Where("id = ?", input.TreatmentPlan.SuperTreatmentPlanID).First(&superTreatmentPlan).Error; err != nil {
			log.Println(err.Error())
			tx.Rollback()
			c.JSON(http.StatusBadRequest, gin.H{"error": "Super treatment plan not found"})
			return
		}

		input.TreatmentPlan.PatientID = appointmentRequest.PatientID
		input.TreatmentPlan.Remaining = superTreatmentPlan.SessionsCount - 1
		input.TreatmentPlan.TotalPrice = superTreatmentPlan.Price * ((100 - input.TreatmentPlan.Discount) / 100)

		if err := tx.Create(&input.TreatmentPlan).Error; err != nil {
			log.Println(err.Error())
			tx.Rollback()
			c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to create treatment plan"})
			return
		}
	} else {
		// Update existing treatment plan
		var treatmentPlan Models.TreatmentPlan
		if err := tx.Model(&Models.TreatmentPlan{}).Where("id = ?", input.TreatmentPlan.ID).First(&treatmentPlan).Error; err != nil {
			log.Println(err.Error())
			tx.Rollback()
			c.JSON(http.StatusBadRequest, gin.H{"error": "Treatment plan not found"})
			return
		}

		treatmentPlan.Remaining -= 1
		if err := tx.Save(&treatmentPlan).Error; err != nil {
			log.Println(err.Error())
			tx.Rollback()
			c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to update treatment plan"})
			return
		}
	}
	appointment.TreatmentPlanID = input.TreatmentPlan.ID

	// Check therapist's schedule for conflicts
	var therapist Models.Therapist
	if err := tx.Model(&Models.Therapist{}).Where("id = ?", appointment.TherapistID).Preload("Schedule.TimeBlocks").Find(&therapist).Error; err != nil {
		tx.Rollback()
		c.JSON(http.StatusBadRequest, gin.H{"error": "Therapist not found"})
		return
	}

	therapist.Schedule.TherapistID = appointment.TherapistID

	for _, timeblock := range therapist.Schedule.TimeBlocks {
		if timeblock.DateTime == appointment.DateTime {
			tx.Rollback()
			c.JSON(http.StatusBadRequest, gin.H{"error": "Time block already booked"})
			return
		}
	}

	// Create a new time block
	timeBlock := Models.CreateTimeBlock(therapist.Schedule, appointment)
	therapist.Schedule.TimeBlocks = append(therapist.Schedule.TimeBlocks, timeBlock)

	if err := tx.Model(&therapist.Schedule).Where("id = ?", therapist.Schedule.ID).Association("TimeBlocks").Replace(&therapist.Schedule.TimeBlocks); err != nil {
		log.Println(err)
		tx.Rollback()
		c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to update therapist schedule"})
		return
	}

	// Associate the appointment with the time block
	if err := tx.Model(&therapist.Schedule.TimeBlocks[len(therapist.Schedule.TimeBlocks)-1]).Association("Appointment").Replace(&appointment); err != nil {
		log.Println(err)
		tx.Rollback()
		c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to associate appointment with time block"})
		return
	}

	// Delete the appointment request
	if err := tx.Delete(&appointmentRequest, "id = ?", appointmentRequest.ID).Error; err != nil {
		log.Println(err)
		tx.Rollback()
		c.JSON(http.StatusBadRequest, gin.H{"error": "Failed to delete appointment request"})
		return
	}

	// Commit the transaction
	if err := tx.Commit().Error; err != nil {
		log.Println(err)
		tx.Rollback()
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to commit transaction"})
		return
	}

	// Send confirmation message (optional)
	// client := twilio.NewRestClient()
	// params := &api.CreateMessageParams{}
	// parts := strings.Split(input.Extra.DateTime, " & ")
	// params.SetBody(fmt.Sprintf("Your Appointment at: %s is confirmed with Dr. %s\nتم تأكيد الحجز علي الميعاد الساعة %s يوم %s مع دكتور %s", appointmentRequest.DateTime, appointmentRequest.TherapistName, parts[1], parts[0], appointment.TherapistName))
	// params.SetFrom("+15076936009")
	// params.SetTo(appointmentRequest.PhoneNumber)
	// resp, err := client.Api.CreateMessage(params)
	// if err != nil {
	// 	fmt.Println(err.Error())
	// 	os.Exit(1)
	// } else {
	// 	if resp.Body != nil {
	// 		fmt.Println(*resp.Body)
	// 	} else {
	// 		fmt.Println(resp.Body)
	// 	}
	// }

	c.JSON(http.StatusOK, gin.H{"message": "Appointment registered successfully"})
}

func RejectAppointment(c *gin.Context) {
	var input struct {
		ID uint `json:"ID"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		return
	}

	var appointmentReq Models.AppointmentRequest

	if err := Models.DB.Model(&Models.AppointmentRequest{}).Where("id = ?", input.ID).First(&appointmentReq).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		return
	}

	// client := twilio.NewRestClient()

	// params := &api.CreateMessageParams{}

	// params.SetBody(fmt.Sprintf("Your Appointment has been rejected please choose another appointment or contact the clinic\nتم رفض الحجز برجاء اختيار ميعاد اخر او التواصل مع العيادة"))
	// params.SetFrom("+15076936009")
	// params.SetTo(appointmentReq.PhoneNumber)

	// resp, err := client.Api.CreateMessage(params)
	// if err != nil {
	// 	fmt.Println(err.Error())
	// 	os.Exit(1)
	// } else {
	// 	if resp.Body != nil {
	// 		fmt.Println(*resp.Body)
	// 	} else {
	// 		fmt.Println(resp.Body)
	// 	}
	// }

	if err := Models.DB.Delete(&Models.AppointmentRequest{}, "id = ?", input.ID).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Rejected Successfully"})
}

func MarkAppointmentAsPaid(c *gin.Context) {
	var input struct {
		ID            uint    `json:"ID"`
		PaymentMethod string  `json:"payment_method"`
		Price         float64 `json:"price"`
	}
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		return
	}
	if err := Models.DB.Model(&Models.Appointment{}).Where("id = ?", input.ID).Update("is_paid", true).Update("is_completed", true).Update("payment_method", input.PaymentMethod).Update("price", input.Price).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "Marked Successfully"})
}

func RemoveAppointment(c *gin.Context) {
	var input struct {
		ID uint `json:"ID"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		c.Abort()
		return
	}

	var treatmentPlanID uint

	if err := Models.DB.Model(&Models.Appointment{}).Where("time_block_id = ?", input.ID).Select("treatment_plan_id").Find(&treatmentPlanID).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		c.Abort()
		return
	}

	var TreatmentPlan Models.TreatmentPlan

	if err := Models.DB.Model(&Models.TreatmentPlan{}).Where("id = ?", treatmentPlanID).First(&TreatmentPlan).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		c.Abort()
		return
	}

	TreatmentPlan.Remaining += 1

	if err := Models.DB.Save(&TreatmentPlan).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		c.Abort()
		return
	}

	if err := Models.DB.Model(&Models.TimeBlock{}).Delete("id = ?", input.ID).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		c.Abort()
		return
	}

	if err := Models.DB.Where("time_block_id = ?", input.ID).Delete(&Models.Appointment{}).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		c.Abort()
		return
	}

	// if err := Models.DB.Model(&Models.Appointment{}).Delete("id = ?", appointment.ID).Error; err != nil {
	// 	log.Println(err)
	// 	c.JSON(http.StatusBadRequest, err)
	// 	c.Abort()
	// 	return
	// }
	c.JSON(http.StatusOK, gin.H{"message": "Deleted Successfully"})
}

func DeletePatient(c *gin.Context) {
	var input struct {
		PatientID uint `json:"patient_id"`
	}
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		c.Abort()
		return
	}
	if err := Models.DB.Delete(&Models.Patient{}, "id = ?", input.PatientID).Error; err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, err)
		c.Abort()
		return
	}
	c.JSON(http.StatusOK, gin.H{
		"message": "Patient Deleted Successfully",
	})
}

